"hard-parse: String -> Any"
[define hard-parse (b (get-field 0) parse)]

"one-two-same?: Struct -> Boolean"
[define one-two-same (s (b symbol-eq? (get-field 0)) (get-field 1))]

"lambda-tag?: Struct -> Boolean"
[define lambda-tag? (b (symbol-eq? [quote lambda]) tag-of)]

"lambda?: Struct -> Boolean"
[define lambda? (s lambda-tag? (b (nat-eq? 2) struct-size))]

"pair?: Struct -> Boolean"
[define pair? (b (symbol-eq? [quote pair]) type-of)]

"is-id?: Struct -> Boolean"
[define is-id? (s lambda? one-two-same)]

"xi: (a -> a -> b) -> a -> b"
[define xi (x i)]

"id-to-i: (Struct -> Struct) -> Struct -> Struct"
[define id-to-i (b xi (c (c is-id? (k [quote i]))))]

[define rest-of-alg i]

"abstr-elim: String -> Any"
[define abstr-elim (b (id-to-i rest-of-alg) hard-parse)]
(abstr-elim "[lambda x y]")
